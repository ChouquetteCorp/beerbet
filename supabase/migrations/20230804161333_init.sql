
create type "public"."event_types" as enum ('public', 'private', 'enterprise');

create type "public"."event_units" as enum ('chouquette', 'beer');

create table "public"."bets" (
    "event_id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "created_at" timestamp with time zone default now(),
    "number" integer,
    "guess" character varying not null default ''::character varying
);


alter table "public"."bets" enable row level security;

create table "public"."events" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "date" timestamp with time zone,
    "title" character varying,
    "subtitle" character varying,
    "description" text,
    "location" character varying,
    "author" uuid,
    "propositions" character varying[],
    "image_url" character varying,
    "winner" character varying,
    "is_finish" boolean not null default false,
    "allowedDomain" character varying,
    "invite_code" uuid not null default uuid_generate_v4(),
    "type" event_types not null default 'private'::event_types,
    "date_finish" timestamp with time zone,
    "unit" event_units not null default 'chouquette'::event_units
);


alter table "public"."events" enable row level security;

create table "public"."events_users_participation" (
    "user_id" uuid not null,
    "event_code" uuid not null,
    "created_at" timestamp with time zone default now()
);


alter table "public"."events_users_participation" enable row level security;

create table "public"."matchs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "sport" character varying,
    "league" character varying,
    "date" timestamp with time zone,
    "team_a" character varying,
    "team_b" character varying,
    "venue" character varying,
    "api_id" bigint,
    "city" character varying
);


alter table "public"."matchs" enable row level security;

create table "public"."profiles" (
    "user_id" uuid not null,
    "username" character varying not null default ''::character varying,
    "old_usernames" character varying[] default ARRAY[]::character varying[]
);


alter table "public"."profiles" enable row level security;

create table "public"."results" (
    "id" bigint generated by default as identity not null,
    "event_id" bigint,
    "from_id" uuid,
    "to_id" uuid,
    "number" real
);


alter table "public"."results" enable row level security;

CREATE UNIQUE INDEX bets_pkey ON public.bets USING btree (event_id, user_id);

CREATE UNIQUE INDEX events_invite_code_key ON public.events USING btree (invite_code);

CREATE UNIQUE INDEX events_pkey ON public.events USING btree (id);

CREATE UNIQUE INDEX events_users_participation_pkey ON public.events_users_participation USING btree (user_id, event_code);

CREATE UNIQUE INDEX "matchs_apiId_key" ON public.matchs USING btree (api_id);

CREATE UNIQUE INDEX matchs_id_key ON public.matchs USING btree (id);

CREATE UNIQUE INDEX matchs_pkey ON public.matchs USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (user_id);

CREATE UNIQUE INDEX results_pkey ON public.results USING btree (id);

alter table "public"."bets" add constraint "bets_pkey" PRIMARY KEY using index "bets_pkey";

alter table "public"."events" add constraint "events_pkey" PRIMARY KEY using index "events_pkey";

alter table "public"."events_users_participation" add constraint "events_users_participation_pkey" PRIMARY KEY using index "events_users_participation_pkey";

alter table "public"."matchs" add constraint "matchs_pkey" PRIMARY KEY using index "matchs_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."results" add constraint "results_pkey" PRIMARY KEY using index "results_pkey";

alter table "public"."bets" add constraint "bets_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) not valid;

alter table "public"."bets" validate constraint "bets_event_id_fkey";

alter table "public"."bets" add constraint "bets_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(user_id) not valid;

alter table "public"."bets" validate constraint "bets_user_id_fkey";

alter table "public"."events" add constraint "events_author_fkey" FOREIGN KEY (author) REFERENCES profiles(user_id) not valid;

alter table "public"."events" validate constraint "events_author_fkey";

alter table "public"."events" add constraint "events_invite_code_key" UNIQUE using index "events_invite_code_key";

alter table "public"."events_users_participation" add constraint "events_users_participation_event_code_fkey" FOREIGN KEY (event_code) REFERENCES events(invite_code) not valid;

alter table "public"."events_users_participation" validate constraint "events_users_participation_event_code_fkey";

alter table "public"."events_users_participation" add constraint "events_users_participation_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."events_users_participation" validate constraint "events_users_participation_user_id_fkey";

alter table "public"."matchs" add constraint "matchs_apiId_key" UNIQUE using index "matchs_apiId_key";

alter table "public"."matchs" add constraint "matchs_id_key" UNIQUE using index "matchs_id_key";

alter table "public"."profiles" add constraint "profiles_user_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."profiles" validate constraint "profiles_user_fkey";

alter table "public"."results" add constraint "results_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) not valid;

alter table "public"."results" validate constraint "results_event_id_fkey";

alter table "public"."results" add constraint "results_from_id_fkey" FOREIGN KEY (from_id) REFERENCES profiles(user_id) not valid;

alter table "public"."results" validate constraint "results_from_id_fkey";

alter table "public"."results" add constraint "results_to_id_fkey" FOREIGN KEY (to_id) REFERENCES profiles(user_id) not valid;

alter table "public"."results" validate constraint "results_to_id_fkey";
